#---------------------------------------------------#
## 如果您不知道如何操作，请参阅 SS-Rule-Snippet 的 Wiki：
## https://github.com/Hackl0us/SS-Rule-Snippet/wiki/clash(X)
#---------------------------------------------------#
# port: 7891 # HTTP(S) 代理服务器端口
# socks-port: 7892 # SOCKS5 代理端口
mixed-port: 7890 # HTTP(S) 和 SOCKS 代理混合端口
# redir-port: 7893 # 透明代理端口，用于 Linux 和 MacOS

# Transparent proxy server port for Linux (TProxy TCP and TProxy UDP)
# tproxy-port: 7895

allow-lan: true # 允许局域网连接
# bind-address: "*" # 绑定 IP 地址，仅作用于 allow-lan 为 true，'*'表示所有地址

#  find-process-mode has 3 values:always, strict, off
#  - always, 开启，强制匹配所有进程
#  - strict, 默认，由 clash 判断是否开启
#  - off, 不匹配进程，推荐在路由器上使用此模式
find-process-mode: strict

mode: rule

# Clash 默认将日志输出至 STDOUT
# 设置日志输出级别 (默认级别：silent，即不输出任何内容，以避免因日志内容过大而导致程序内存溢出）。
# 5 个级别：silent / info / warning / error / debug 。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。
log-level: debug

external-controller: 127.0.0.1:9090 # RESTful API 监听地址
# external-controller-tls: 0.0.0.0:9443 # RESTful API HTTPS 监听地址，需要配置 tls 部分配置文件
# secret: "123456" # `Authorization:Bearer ${secret}`

# 存放配置文件的相对路径，或存放网页静态资源的绝对路径
# Clash core 将会将其部署在 http://{{external-controller}}/ui
# external-ui: folder

# RESTful API 的口令 (可选)
# 通过 HTTP 头中 Authorization: Bearer ${secret} 参数来验证口令
# 当 RESTful API 的监听地址为 0.0.0.0 时，请务必设定口令以保证安全
# secret: ""

# 出站网卡接口
# interface-name: en0

# DNS 服务器和建立连接时的 静态 Hosts, 仅在 dns.enhanced-mode 模式为 redir-host 生效
# 支持通配符域名 (例如: *.clash.dev, *.foo.*.example.com )
# 不使用通配符的域名优先级高于使用通配符的域名 (例如: foo.example.com > *.example.com > .example.com )
# 注意: +.foo.com 的效果等同于 .foo.com 和 foo.com
hosts:
# '*.clash.dev': 127.0.0.1
# '.dev': 127.0.0.1
# 'alpha.clash.dev': '::1'

# 缓存设置(文件位置./cache.db)
profile: # 存储 select 选择记录
  store-selected: true
  # 持久化 fake-ip
  store-fake-ip: true

tun:
  enable: true
  stack: system # system or gvisor
  dns-hijack:
    - 0.0.0.0:53 # 需要劫持的 DNS
  auto-detect-interface: true # 自动识别出口网卡
  auto-route: true # 配置路由表
  mtu: 9000 # 最大传输单元
  # strict_route: true # 将所有连接路由到tun来防止泄漏，但你的设备将无法其他设备被访问
  # inet4_route_address: # 启用 auto_route 时使用自定义路由而不是默认路由
  #   - 0.0.0.0/1
  #   - 128.0.0.0/1
  # inet6_route_address: # 启用 auto_route 时使用自定义路由而不是默认路由
  #   - "::/1"
  #   - "8000::/1"
  # endpoint_independent_nat: false # 启用独立于端点的 NAT
  # include_uid: # UID 规则仅在 Linux 下被支持，并且需要 auto_route
  # - 0
  # include_uid_range: # 限制被路由的的用户范围
  # - 1000-99999
  # exclude_uid: # 排除路由的的用户
  #- 1000
  # exclude_uid_range: # 排除路由的的用户范围
  # - 1000-99999
  
  # Android 用户和应用规则仅在 Android 下被支持
  # 并且需要 auto_route
  
  # include_android_user: # 限制被路由的 Android 用户
  # - 0
  # - 10
  # include_package: # 限制被路由的 Android 应用包名
  # - com.android.chrome
  # exclude_package: # 排除被路由的 Android 应用包名
  # - com.android.captiveportallogin

# DNS 服务器配置
# 极其复杂 其需要配合上方的sniff嗅探才能很好的
# 防止污染 分流
dns:
  enable: true #DNS服务器开关(false/true)
  listen: 0.0.0.0:1053 #DNS服务器监听地址
  ipv6: false #IP6解析开关；如果为false，将返回ip6结果为空

  # DNS模式(redir-host/fake-ip), 
  # redir-host传递域名，可远程解析 【Meta专属】
  enhanced-mode: fake-ip

  #Fake-IP解析地址池
  fake-ip-range: 198.18.0.1/16

  # 仅填写 DNS 服务器的 IP 地址, 解析非IP的dns用的dns服务器,只支持纯IP
  # tls协议 即DoT，dns over tls，默认端口是853
  # DoH，DNS over http，默认端口是443
  default-nameserver:
    - 120.53.53.53
    - 223.5.5.5
    # - https://120.53.53.53/dns-query
    # - https://223.5.5.5/dns-query
  # 支持 UDP / TCP / DoT / DoH 协议的 DNS 服务，可以指明具体的连接端口号。
  # 所有 DNS 请求将会直接发送到服务器，不经过任何代理。
  # Stash 会使用最先获得的解析记录回复 DNS 请求
  # 不建议配置超过 2 个 DNS 服务器，会增加系统功耗 默认DNS服务器，支持udp/tcp/dot/doh/doq
  # 速度会慢一些，但是会解决dns污染劫持的问题，比如AppleStore内就会劫持所有的udp53端口的查询
  # 导致无法使用代理服务，因为通过自定义的dns服务器，根本查不到结果
  nameserver:
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query
  # 按指定策略分流 DNS ，可以使用 geosite 分流 DNS 解析，暂时没发现什么用
  # nameserver-policy:
  #   "geosite:cn":
  #     - 119.29.29.29

  # 当proxy里的server为域名时，使用该列表里的dns服务器解析。
  # 当配置文件无此字段的时候，使用nameserver列表里的dns解析；
  # 支持UDP/TCP/DoT/DoH/DoQ
  # proxy-server-nameserver:
    # - https://doh.pub/dns-query
    # - https://dns.alidns.com/dns-query
  # ===================================================================
  #  回落服务设置，针对污染问题而设计
  # ====================================================================
  # 回落DNS服务器过滤
  # geoip为真时，不匹配为geoip规则的使用fallback返回结果
  # ipcidr列表中的ip使用fallback返回解析结果
  fallback-filter:
    geoip: true
    geoip-code: CN
    ipcidr:
      - 240.0.0.0/4
  #回落DNS服务器，支持udp/tcp/dot/doh/doq
  fallback:
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query
  # 针对fake-ip的模式的设置
  # 在以下列表的域名将不会被解析为 fake ip，这些域名相关的解析请求将会返回它们真实的 IP 地址
  fake-ip-filter:
    - "*.lan"
    # Stun Services
    - "+.stun.*.*"
    - "+.stun.*.*.*"
    - "+.stun.*.*.*.*"
    - "+.stun.*.*.*.*.*"

    # Google Voices
    - "lens.l.google.com"

    # Nintendo Switch
    - "*.n.n.srv.nintendo.net"

    # PlayStation
    - "+.stun.playstation.net"

    # XBox
    - "xbox.*.*.microsoft.com"
    - "*.*.xboxlive.com"

    # Microsoft
    - "*.msftncsi.com"
    - "*.msftconnecttest.com"

    # Bilibili CDN
    - "*.mcdn.bilivideo.cn"

    # Apple
    - "*.apple.com"
    - "*.apple.com.cn"
    - "*.icloud.com"
    - "*.icloud.com.cn"
    - localhost.ptlogin2.qq.com
